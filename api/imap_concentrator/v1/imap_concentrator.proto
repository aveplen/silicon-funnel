syntax = "proto3";

package aveplen.imap_concentrator.v1;
option go_package = "github.com/aveplen/silicon-funnel/pkg/imap_concentrator;imap_concentrator";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service ImapConcentrator {
  rpc AssignUniqueClientID(AssignUniqueClientIDRequest) returns (AssignUniqueClientIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/client_id"
    };
  }

  rpc SubscribeToAllNotificationsV1(SubscribeToAllNotificationsV1Request) returns (stream NotificationV1) {}

  rpc SubscribeToChatNotificationsV1(SubscribeToChatNotificationsV1Request) returns (stream NotificationV1) {
    option (google.api.http) = {
      post: "/api/v1/sub"
      body: "*"
      additional_bindings {
        get: "/api/v1/{chatID}/sub/{clientID}"
      }
    };
  }

  rpc UnsubscribeFromNotificationsV1(UnsubscribeFromNotificationsV1Request) returns (Ack) {
    option (google.api.http) = {
      post: "/api/v1/unsub"
      body: "*"
      additional_bindings {
        get: "/api/v1/unsub/{clientID}"
      }
    };
  }

  rpc InsertMailboxV1(InsertMailboxV1Request) returns (Ack) {
    option (google.api.http) = {
      post: "/api/v1/{chatID}/mailbox"
      body: "*"
    };
  }

  // This rpc should not have gateway endpoint. It is used to authenticate clients.
  rpc InsertChatV1(InsertChatV1Request) returns (Ack) {};

  rpc PollV1(PollV1Request) returns (Ack) {
    option (google.api.http) = {
      get: "/api/v1/{chatID}/poll"
      additional_bindings {
          post: "/api/v1/poll"
          body: "*"
      }
    };
  }

  rpc ListMailboxesV1(ListMailboxesV1Request) returns (ListMailboxesV1Response) {
    option (google.api.http) = {
      get: "/api/v1/{chatID}/mailbox"
      additional_bindings {
        post: "/api/v1/mailbox/all"
        body: "*"
      }
    };
  }

  rpc GetMailboxV1(GetMailboxV1Request) returns (GetMailboxV1Response) {
    option (google.api.http) = {
      get: "/api/v1/{chatID}/mailbox/{mailboxID}"
      additional_bindings {
        post: "/api/v1/mailbox"
        body: "*"
      }
    };
  }

  rpc UpdateMailboxV1(UpdateMailboxV1Request) returns (Ack) {
    option (google.api.http) = {
      put: "/api/v1/{chatID}/mailbox"
      body: "*"
    };
  }

  rpc DeleteMailboxV1(DeleteMailboxV1Request) returns (Ack) {
    option (google.api.http) = {
      delete: "/api/v1/{chatID}/mailbox"
    };
  }
}

// Model for mailbox version 1.
message MailboxV1 {
  int64 mailboxID = 1;
  string host = 2;
  int32 port = 3;
  string mailbox = 4;
  string username = 5;
  string password = 6;
}

// Model for notification version 1.
message NotificationV1 {
  int64 chatID = 1;
  string sender = 2;
  string email = 3;
  string host = 4;
  int32 port = 5;
  string mailbox = 6;
  string title = 7;
  string body = 8;
  google.protobuf.Timestamp timestamp = 9;
}

// Model for acknowledge.
message Ack {}

// Every client should subscribe to stream with unique client id. To make sure
// that all id-s are unique, they are generated by server. Synchronous api
// endpoints do not require client id.
message AssignUniqueClientIDRequest {}

message AssignUniqueClientIDResponse {
  int64 clientID = 1;
}

// Subscribe to notifications from all tracked imap mailboxes. (to be used by bot)
message SubscribeToAllNotificationsV1Request {
  string key = 1;
  int64 clientID = 2;
}

// Subscribe to notifications from mailboxes assigned to unique telegram chat
// id. Tg chat id serves the purpose of api access token. You cannot access
// this endpoint unless you initialized profile via bot's /start command.
// (to be used by gateway)
message SubscribeToChatNotificationsV1Request {
  int64 clientID = 1;
  int64 chatID = 2;
}

// Graceful unsubscription.
message UnsubscribeFromNotificationsV1Request {
  int64 clientID = 1;
}

// Request to insert new mailbox into tracking list and assign it to chat id.
message InsertMailboxV1Request {
  int64 chatID = 1;
  MailboxV1 mailbox = 2;
}

// Request to start conversation via saving unique client id to database for
// future mailbox assignment.
message InsertChatV1Request {
  int64 chatID = 1;
}

// Request to poll mailboxes assigned to given chat id asap. (not waiting for cron)
message PollV1Request {
  int64 chatID = 1;
}

// Get a list of mailboxes assigned to given chat id.
message ListMailboxesV1Request {
  int64 chatID = 1;
}

// List of mailboxes. Includes database id's for possible removal.
message ListMailboxesV1Response {
  repeated MailboxV1 mailboxes = 1;
}

// Get info about particular mailbox by id
message GetMailboxV1Request {
  int64 chatID = 1;
  int64 mailboxID = 2;
}

message GetMailboxV1Response {
  int64 chatID = 1;
  MailboxV1 mailbox = 2;
}

// Request to update mailbox with given database id from tracking list.
message UpdateMailboxV1Request {
  int64 chatID = 1;
  MailboxV1 mailbox = 2;
}

// Delete to remove mailbox with given database id from tracking list.
message DeleteMailboxV1Request {
  int64 chatID = 1;
  int64 mailboxID = 2;
}