// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: imap_concentrator/v1/imap_concentrator.proto

package imap_concentrator

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Model for mailbox version 1.
type MailboxV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailboxID int64  `protobuf:"varint,1,opt,name=mailboxID,proto3" json:"mailboxID,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port      int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Mailbox   string `protobuf:"bytes,4,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Username  string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *MailboxV1) Reset() {
	*x = MailboxV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailboxV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailboxV1) ProtoMessage() {}

func (x *MailboxV1) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailboxV1.ProtoReflect.Descriptor instead.
func (*MailboxV1) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{0}
}

func (x *MailboxV1) GetMailboxID() int64 {
	if x != nil {
		return x.MailboxID
	}
	return 0
}

func (x *MailboxV1) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MailboxV1) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MailboxV1) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *MailboxV1) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MailboxV1) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Model for notification version 1.
type NotificationV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID    int64                  `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	Sender    string                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Email     string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Host      string                 `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port      int32                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Mailbox   string                 `protobuf:"bytes,6,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
	Title     string                 `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Body      string                 `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NotificationV1) Reset() {
	*x = NotificationV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationV1) ProtoMessage() {}

func (x *NotificationV1) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationV1.ProtoReflect.Descriptor instead.
func (*NotificationV1) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{1}
}

func (x *NotificationV1) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *NotificationV1) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *NotificationV1) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotificationV1) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NotificationV1) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NotificationV1) GetMailbox() string {
	if x != nil {
		return x.Mailbox
	}
	return ""
}

func (x *NotificationV1) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NotificationV1) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NotificationV1) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Model for acknowledge.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{2}
}

// Every client should subscribe to stream with unique client id. To make sure
// that all id-s are unique, they are generated by server. Synchronous api
// endpoints do not require client id.
type AssignUniqueClientIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssignUniqueClientIDRequest) Reset() {
	*x = AssignUniqueClientIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUniqueClientIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUniqueClientIDRequest) ProtoMessage() {}

func (x *AssignUniqueClientIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUniqueClientIDRequest.ProtoReflect.Descriptor instead.
func (*AssignUniqueClientIDRequest) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{3}
}

type AssignUniqueClientIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID int64 `protobuf:"varint,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *AssignUniqueClientIDResponse) Reset() {
	*x = AssignUniqueClientIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignUniqueClientIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUniqueClientIDResponse) ProtoMessage() {}

func (x *AssignUniqueClientIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUniqueClientIDResponse.ProtoReflect.Descriptor instead.
func (*AssignUniqueClientIDResponse) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{4}
}

func (x *AssignUniqueClientIDResponse) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

// Subscribe to notifications from all tracked imap mailboxes. (to be used by bot)
type SubscribeToAllNotificationsV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ClientID int64  `protobuf:"varint,2,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *SubscribeToAllNotificationsV1Request) Reset() {
	*x = SubscribeToAllNotificationsV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToAllNotificationsV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToAllNotificationsV1Request) ProtoMessage() {}

func (x *SubscribeToAllNotificationsV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToAllNotificationsV1Request.ProtoReflect.Descriptor instead.
func (*SubscribeToAllNotificationsV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeToAllNotificationsV1Request) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SubscribeToAllNotificationsV1Request) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

// Subscribe to notifications from mailboxes assigned to unique telegram chat
// id. Tg chat id serves the purpose of api access token. You cannot access
// this endpoint unless you initialized profile via bot's /start command.
// (to be used by gateway)
type SubscribeToChatNotificationsV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID int64 `protobuf:"varint,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ChatID   int64 `protobuf:"varint,2,opt,name=chatID,proto3" json:"chatID,omitempty"`
}

func (x *SubscribeToChatNotificationsV1Request) Reset() {
	*x = SubscribeToChatNotificationsV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToChatNotificationsV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToChatNotificationsV1Request) ProtoMessage() {}

func (x *SubscribeToChatNotificationsV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToChatNotificationsV1Request.ProtoReflect.Descriptor instead.
func (*SubscribeToChatNotificationsV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeToChatNotificationsV1Request) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

func (x *SubscribeToChatNotificationsV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

// Graceful unsubscription.
type UnsubscribeFromNotificationsV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID int64 `protobuf:"varint,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *UnsubscribeFromNotificationsV1Request) Reset() {
	*x = UnsubscribeFromNotificationsV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeFromNotificationsV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeFromNotificationsV1Request) ProtoMessage() {}

func (x *UnsubscribeFromNotificationsV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeFromNotificationsV1Request.ProtoReflect.Descriptor instead.
func (*UnsubscribeFromNotificationsV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{7}
}

func (x *UnsubscribeFromNotificationsV1Request) GetClientID() int64 {
	if x != nil {
		return x.ClientID
	}
	return 0
}

// Request to insert new mailbox into tracking list and assign it to chat id.
type InsertMailboxV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID  int64      `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	Mailbox *MailboxV1 `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *InsertMailboxV1Request) Reset() {
	*x = InsertMailboxV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertMailboxV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertMailboxV1Request) ProtoMessage() {}

func (x *InsertMailboxV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertMailboxV1Request.ProtoReflect.Descriptor instead.
func (*InsertMailboxV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{8}
}

func (x *InsertMailboxV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *InsertMailboxV1Request) GetMailbox() *MailboxV1 {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

// Request to start conversation via saving unique client id to database for
// future mailbox assignment.
type InsertChatV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID int64 `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
}

func (x *InsertChatV1Request) Reset() {
	*x = InsertChatV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertChatV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertChatV1Request) ProtoMessage() {}

func (x *InsertChatV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertChatV1Request.ProtoReflect.Descriptor instead.
func (*InsertChatV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{9}
}

func (x *InsertChatV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

// Request to poll mailboxes assigned to given chat id asap. (not waiting for cron)
type PollV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID int64 `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
}

func (x *PollV1Request) Reset() {
	*x = PollV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollV1Request) ProtoMessage() {}

func (x *PollV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollV1Request.ProtoReflect.Descriptor instead.
func (*PollV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{10}
}

func (x *PollV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

// Get a list of mailboxes assigned to given chat id.
type ListMailboxesV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID int64 `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
}

func (x *ListMailboxesV1Request) Reset() {
	*x = ListMailboxesV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMailboxesV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMailboxesV1Request) ProtoMessage() {}

func (x *ListMailboxesV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMailboxesV1Request.ProtoReflect.Descriptor instead.
func (*ListMailboxesV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{11}
}

func (x *ListMailboxesV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

// List of mailboxes. Includes database id's for possible removal.
type ListMailboxesV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mailboxes []*MailboxV1 `protobuf:"bytes,1,rep,name=mailboxes,proto3" json:"mailboxes,omitempty"`
}

func (x *ListMailboxesV1Response) Reset() {
	*x = ListMailboxesV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMailboxesV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMailboxesV1Response) ProtoMessage() {}

func (x *ListMailboxesV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMailboxesV1Response.ProtoReflect.Descriptor instead.
func (*ListMailboxesV1Response) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{12}
}

func (x *ListMailboxesV1Response) GetMailboxes() []*MailboxV1 {
	if x != nil {
		return x.Mailboxes
	}
	return nil
}

// Get info about particular mailbox by id
type GetMailboxV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID    int64 `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	MailboxID int64 `protobuf:"varint,2,opt,name=mailboxID,proto3" json:"mailboxID,omitempty"`
}

func (x *GetMailboxV1Request) Reset() {
	*x = GetMailboxV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailboxV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailboxV1Request) ProtoMessage() {}

func (x *GetMailboxV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailboxV1Request.ProtoReflect.Descriptor instead.
func (*GetMailboxV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{13}
}

func (x *GetMailboxV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *GetMailboxV1Request) GetMailboxID() int64 {
	if x != nil {
		return x.MailboxID
	}
	return 0
}

type GetMailboxV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID  int64      `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	Mailbox *MailboxV1 `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *GetMailboxV1Response) Reset() {
	*x = GetMailboxV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMailboxV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMailboxV1Response) ProtoMessage() {}

func (x *GetMailboxV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMailboxV1Response.ProtoReflect.Descriptor instead.
func (*GetMailboxV1Response) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{14}
}

func (x *GetMailboxV1Response) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *GetMailboxV1Response) GetMailbox() *MailboxV1 {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

// Request to update mailbox with given database id from tracking list.
type UpdateMailboxV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID  int64      `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	Mailbox *MailboxV1 `protobuf:"bytes,2,opt,name=mailbox,proto3" json:"mailbox,omitempty"`
}

func (x *UpdateMailboxV1Request) Reset() {
	*x = UpdateMailboxV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMailboxV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMailboxV1Request) ProtoMessage() {}

func (x *UpdateMailboxV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMailboxV1Request.ProtoReflect.Descriptor instead.
func (*UpdateMailboxV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMailboxV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *UpdateMailboxV1Request) GetMailbox() *MailboxV1 {
	if x != nil {
		return x.Mailbox
	}
	return nil
}

// Delete to remove mailbox with given database id from tracking list.
type DeleteMailboxV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID    int64 `protobuf:"varint,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	MailboxID int64 `protobuf:"varint,2,opt,name=mailboxID,proto3" json:"mailboxID,omitempty"`
}

func (x *DeleteMailboxV1Request) Reset() {
	*x = DeleteMailboxV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMailboxV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMailboxV1Request) ProtoMessage() {}

func (x *DeleteMailboxV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMailboxV1Request.ProtoReflect.Descriptor instead.
func (*DeleteMailboxV1Request) Descriptor() ([]byte, []int) {
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteMailboxV1Request) GetChatID() int64 {
	if x != nil {
		return x.ChatID
	}
	return 0
}

func (x *DeleteMailboxV1Request) GetMailboxID() int64 {
	if x != nil {
		return x.MailboxID
	}
	return 0
}

var File_imap_concentrator_v1_imap_concentrator_proto protoreflect.FileDescriptor

var file_imap_concentrator_v1_imap_concentrator_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c,
	0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x09,
	0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x54, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x25, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x16, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x07,
	0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22,
	0x2d, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x22, 0x27,
	0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65,
	0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31,
	0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x76, 0x65, 0x70,
	0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x56, 0x31, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x22, 0x73, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a,
	0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x22, 0x4e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f,
	0x78, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x49, 0x44,
	0x32, 0x8a, 0x0e, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x39,
	0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x76, 0x65, 0x70,
	0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x95, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x31, 0x12, 0x42, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x31, 0x22, 0x00, 0x30, 0x01, 0x12, 0xd0, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x12, 0x43, 0x2e, 0x61, 0x76,
	0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x2f, 0x7b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x30, 0x01, 0x12, 0xbe, 0x01, 0x0a, 0x1e,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x12, 0x43,
	0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d,
	0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x0d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x3a, 0x01, 0x2a,
	0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x73, 0x75,
	0x62, 0x2f, 0x7b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12, 0x8f, 0x01, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31,
	0x12, 0x34, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x66,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x56, 0x31, 0x12, 0x31,
	0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x6c, 0x56,
	0x31, 0x12, 0x2b, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x6c,
	0x5a, 0x11, 0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0xba, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x65, 0x73, 0x56, 0x31, 0x12, 0x34, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65,
	0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62,
	0x6f, 0x78, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x5a, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a,
	0x12, 0xb9, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56,
	0x31, 0x12, 0x31, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69,
	0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x2f, 0x7b, 0x6d, 0x61, 0x69, 0x6c,
	0x62, 0x6f, 0x78, 0x49, 0x44, 0x7d, 0x5a, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31,
	0x12, 0x34, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x8c,
	0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x56, 0x31, 0x12, 0x34, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x76, 0x65, 0x70, 0x6c,
	0x65, 0x6e, 0x2e, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x42, 0x4b, 0x5a,
	0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x65, 0x70,
	0x6c, 0x65, 0x6e, 0x2f, 0x73, 0x69, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x2d, 0x66, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3b, 0x69, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_imap_concentrator_v1_imap_concentrator_proto_rawDescOnce sync.Once
	file_imap_concentrator_v1_imap_concentrator_proto_rawDescData = file_imap_concentrator_v1_imap_concentrator_proto_rawDesc
)

func file_imap_concentrator_v1_imap_concentrator_proto_rawDescGZIP() []byte {
	file_imap_concentrator_v1_imap_concentrator_proto_rawDescOnce.Do(func() {
		file_imap_concentrator_v1_imap_concentrator_proto_rawDescData = protoimpl.X.CompressGZIP(file_imap_concentrator_v1_imap_concentrator_proto_rawDescData)
	})
	return file_imap_concentrator_v1_imap_concentrator_proto_rawDescData
}

var file_imap_concentrator_v1_imap_concentrator_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_imap_concentrator_v1_imap_concentrator_proto_goTypes = []interface{}{
	(*MailboxV1)(nil),                             // 0: aveplen.imap_concentrator.v1.MailboxV1
	(*NotificationV1)(nil),                        // 1: aveplen.imap_concentrator.v1.NotificationV1
	(*Ack)(nil),                                   // 2: aveplen.imap_concentrator.v1.Ack
	(*AssignUniqueClientIDRequest)(nil),           // 3: aveplen.imap_concentrator.v1.AssignUniqueClientIDRequest
	(*AssignUniqueClientIDResponse)(nil),          // 4: aveplen.imap_concentrator.v1.AssignUniqueClientIDResponse
	(*SubscribeToAllNotificationsV1Request)(nil),  // 5: aveplen.imap_concentrator.v1.SubscribeToAllNotificationsV1Request
	(*SubscribeToChatNotificationsV1Request)(nil), // 6: aveplen.imap_concentrator.v1.SubscribeToChatNotificationsV1Request
	(*UnsubscribeFromNotificationsV1Request)(nil), // 7: aveplen.imap_concentrator.v1.UnsubscribeFromNotificationsV1Request
	(*InsertMailboxV1Request)(nil),                // 8: aveplen.imap_concentrator.v1.InsertMailboxV1Request
	(*InsertChatV1Request)(nil),                   // 9: aveplen.imap_concentrator.v1.InsertChatV1Request
	(*PollV1Request)(nil),                         // 10: aveplen.imap_concentrator.v1.PollV1Request
	(*ListMailboxesV1Request)(nil),                // 11: aveplen.imap_concentrator.v1.ListMailboxesV1Request
	(*ListMailboxesV1Response)(nil),               // 12: aveplen.imap_concentrator.v1.ListMailboxesV1Response
	(*GetMailboxV1Request)(nil),                   // 13: aveplen.imap_concentrator.v1.GetMailboxV1Request
	(*GetMailboxV1Response)(nil),                  // 14: aveplen.imap_concentrator.v1.GetMailboxV1Response
	(*UpdateMailboxV1Request)(nil),                // 15: aveplen.imap_concentrator.v1.UpdateMailboxV1Request
	(*DeleteMailboxV1Request)(nil),                // 16: aveplen.imap_concentrator.v1.DeleteMailboxV1Request
	(*timestamppb.Timestamp)(nil),                 // 17: google.protobuf.Timestamp
}
var file_imap_concentrator_v1_imap_concentrator_proto_depIdxs = []int32{
	17, // 0: aveplen.imap_concentrator.v1.NotificationV1.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: aveplen.imap_concentrator.v1.InsertMailboxV1Request.mailbox:type_name -> aveplen.imap_concentrator.v1.MailboxV1
	0,  // 2: aveplen.imap_concentrator.v1.ListMailboxesV1Response.mailboxes:type_name -> aveplen.imap_concentrator.v1.MailboxV1
	0,  // 3: aveplen.imap_concentrator.v1.GetMailboxV1Response.mailbox:type_name -> aveplen.imap_concentrator.v1.MailboxV1
	0,  // 4: aveplen.imap_concentrator.v1.UpdateMailboxV1Request.mailbox:type_name -> aveplen.imap_concentrator.v1.MailboxV1
	3,  // 5: aveplen.imap_concentrator.v1.ImapConcentrator.AssignUniqueClientID:input_type -> aveplen.imap_concentrator.v1.AssignUniqueClientIDRequest
	5,  // 6: aveplen.imap_concentrator.v1.ImapConcentrator.SubscribeToAllNotificationsV1:input_type -> aveplen.imap_concentrator.v1.SubscribeToAllNotificationsV1Request
	6,  // 7: aveplen.imap_concentrator.v1.ImapConcentrator.SubscribeToChatNotificationsV1:input_type -> aveplen.imap_concentrator.v1.SubscribeToChatNotificationsV1Request
	7,  // 8: aveplen.imap_concentrator.v1.ImapConcentrator.UnsubscribeFromNotificationsV1:input_type -> aveplen.imap_concentrator.v1.UnsubscribeFromNotificationsV1Request
	8,  // 9: aveplen.imap_concentrator.v1.ImapConcentrator.InsertMailboxV1:input_type -> aveplen.imap_concentrator.v1.InsertMailboxV1Request
	9,  // 10: aveplen.imap_concentrator.v1.ImapConcentrator.InsertChatV1:input_type -> aveplen.imap_concentrator.v1.InsertChatV1Request
	10, // 11: aveplen.imap_concentrator.v1.ImapConcentrator.PollV1:input_type -> aveplen.imap_concentrator.v1.PollV1Request
	11, // 12: aveplen.imap_concentrator.v1.ImapConcentrator.ListMailboxesV1:input_type -> aveplen.imap_concentrator.v1.ListMailboxesV1Request
	13, // 13: aveplen.imap_concentrator.v1.ImapConcentrator.GetMailboxV1:input_type -> aveplen.imap_concentrator.v1.GetMailboxV1Request
	15, // 14: aveplen.imap_concentrator.v1.ImapConcentrator.UpdateMailboxV1:input_type -> aveplen.imap_concentrator.v1.UpdateMailboxV1Request
	16, // 15: aveplen.imap_concentrator.v1.ImapConcentrator.DeleteMailboxV1:input_type -> aveplen.imap_concentrator.v1.DeleteMailboxV1Request
	4,  // 16: aveplen.imap_concentrator.v1.ImapConcentrator.AssignUniqueClientID:output_type -> aveplen.imap_concentrator.v1.AssignUniqueClientIDResponse
	1,  // 17: aveplen.imap_concentrator.v1.ImapConcentrator.SubscribeToAllNotificationsV1:output_type -> aveplen.imap_concentrator.v1.NotificationV1
	1,  // 18: aveplen.imap_concentrator.v1.ImapConcentrator.SubscribeToChatNotificationsV1:output_type -> aveplen.imap_concentrator.v1.NotificationV1
	2,  // 19: aveplen.imap_concentrator.v1.ImapConcentrator.UnsubscribeFromNotificationsV1:output_type -> aveplen.imap_concentrator.v1.Ack
	2,  // 20: aveplen.imap_concentrator.v1.ImapConcentrator.InsertMailboxV1:output_type -> aveplen.imap_concentrator.v1.Ack
	2,  // 21: aveplen.imap_concentrator.v1.ImapConcentrator.InsertChatV1:output_type -> aveplen.imap_concentrator.v1.Ack
	2,  // 22: aveplen.imap_concentrator.v1.ImapConcentrator.PollV1:output_type -> aveplen.imap_concentrator.v1.Ack
	12, // 23: aveplen.imap_concentrator.v1.ImapConcentrator.ListMailboxesV1:output_type -> aveplen.imap_concentrator.v1.ListMailboxesV1Response
	14, // 24: aveplen.imap_concentrator.v1.ImapConcentrator.GetMailboxV1:output_type -> aveplen.imap_concentrator.v1.GetMailboxV1Response
	2,  // 25: aveplen.imap_concentrator.v1.ImapConcentrator.UpdateMailboxV1:output_type -> aveplen.imap_concentrator.v1.Ack
	2,  // 26: aveplen.imap_concentrator.v1.ImapConcentrator.DeleteMailboxV1:output_type -> aveplen.imap_concentrator.v1.Ack
	16, // [16:27] is the sub-list for method output_type
	5,  // [5:16] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_imap_concentrator_v1_imap_concentrator_proto_init() }
func file_imap_concentrator_v1_imap_concentrator_proto_init() {
	if File_imap_concentrator_v1_imap_concentrator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailboxV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUniqueClientIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignUniqueClientIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToAllNotificationsV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToChatNotificationsV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeFromNotificationsV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertMailboxV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertChatV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMailboxesV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMailboxesV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailboxV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMailboxV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMailboxV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_imap_concentrator_v1_imap_concentrator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMailboxV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_imap_concentrator_v1_imap_concentrator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_imap_concentrator_v1_imap_concentrator_proto_goTypes,
		DependencyIndexes: file_imap_concentrator_v1_imap_concentrator_proto_depIdxs,
		MessageInfos:      file_imap_concentrator_v1_imap_concentrator_proto_msgTypes,
	}.Build()
	File_imap_concentrator_v1_imap_concentrator_proto = out.File
	file_imap_concentrator_v1_imap_concentrator_proto_rawDesc = nil
	file_imap_concentrator_v1_imap_concentrator_proto_goTypes = nil
	file_imap_concentrator_v1_imap_concentrator_proto_depIdxs = nil
}
