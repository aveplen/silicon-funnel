package imap_concentrator

// Code generated by http://github.com/gojuno/minimock (3.0.10). DO NOT EDIT.

//go:generate minimock -i github.com/aveplen/silicon-funnel/pkg/imap_concentrator/v1.UnsafeImapConcentratorServer -o ./unsafe_imap_concentrator_server_mock_test.go -n UnsafeImapConcentratorServerMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UnsafeImapConcentratorServerMock implements UnsafeImapConcentratorServer
type UnsafeImapConcentratorServerMock struct {
	t minimock.Tester

	funcmustEmbedUnimplementedImapConcentratorServer          func()
	inspectFuncmustEmbedUnimplementedImapConcentratorServer   func()
	aftermustEmbedUnimplementedImapConcentratorServerCounter  uint64
	beforemustEmbedUnimplementedImapConcentratorServerCounter uint64
	mustEmbedUnimplementedImapConcentratorServerMock          mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer
}

// NewUnsafeImapConcentratorServerMock returns a mock for UnsafeImapConcentratorServer
func NewUnsafeImapConcentratorServerMock(t minimock.Tester) *UnsafeImapConcentratorServerMock {
	m := &UnsafeImapConcentratorServerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.mustEmbedUnimplementedImapConcentratorServerMock = mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer{mock: m}

	return m
}

type mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer struct {
	mock               *UnsafeImapConcentratorServerMock
	defaultExpectation *UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation
	expectations       []*UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation
}

// UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation specifies expectation struct of the UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer
type UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation struct {
	mock *UnsafeImapConcentratorServerMock

	Counter uint64
}

// Expect sets up expected params for UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer
func (mmmustEmbedUnimplementedImapConcentratorServer *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer) Expect() *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer {
	if mmmustEmbedUnimplementedImapConcentratorServer.mock.funcmustEmbedUnimplementedImapConcentratorServer != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.mock.t.Fatalf("UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer mock is already set by Set")
	}

	if mmmustEmbedUnimplementedImapConcentratorServer.defaultExpectation == nil {
		mmmustEmbedUnimplementedImapConcentratorServer.defaultExpectation = &UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation{}
	}

	return mmmustEmbedUnimplementedImapConcentratorServer
}

// Inspect accepts an inspector function that has same arguments as the UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer
func (mmmustEmbedUnimplementedImapConcentratorServer *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer) Inspect(f func()) *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer {
	if mmmustEmbedUnimplementedImapConcentratorServer.mock.inspectFuncmustEmbedUnimplementedImapConcentratorServer != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.mock.t.Fatalf("Inspect function is already set for UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer")
	}

	mmmustEmbedUnimplementedImapConcentratorServer.mock.inspectFuncmustEmbedUnimplementedImapConcentratorServer = f

	return mmmustEmbedUnimplementedImapConcentratorServer
}

// Return sets up results that will be returned by UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer
func (mmmustEmbedUnimplementedImapConcentratorServer *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer) Return() *UnsafeImapConcentratorServerMock {
	if mmmustEmbedUnimplementedImapConcentratorServer.mock.funcmustEmbedUnimplementedImapConcentratorServer != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.mock.t.Fatalf("UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer mock is already set by Set")
	}

	if mmmustEmbedUnimplementedImapConcentratorServer.defaultExpectation == nil {
		mmmustEmbedUnimplementedImapConcentratorServer.defaultExpectation = &UnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServerExpectation{mock: mmmustEmbedUnimplementedImapConcentratorServer.mock}
	}

	return mmmustEmbedUnimplementedImapConcentratorServer.mock
}

//Set uses given function f to mock the UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer method
func (mmmustEmbedUnimplementedImapConcentratorServer *mUnsafeImapConcentratorServerMockmustEmbedUnimplementedImapConcentratorServer) Set(f func()) *UnsafeImapConcentratorServerMock {
	if mmmustEmbedUnimplementedImapConcentratorServer.defaultExpectation != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.mock.t.Fatalf("Default expectation is already set for the UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer method")
	}

	if len(mmmustEmbedUnimplementedImapConcentratorServer.expectations) > 0 {
		mmmustEmbedUnimplementedImapConcentratorServer.mock.t.Fatalf("Some expectations are already set for the UnsafeImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServer method")
	}

	mmmustEmbedUnimplementedImapConcentratorServer.mock.funcmustEmbedUnimplementedImapConcentratorServer = f
	return mmmustEmbedUnimplementedImapConcentratorServer.mock
}

// mustEmbedUnimplementedImapConcentratorServer implements UnsafeImapConcentratorServer
func (mmmustEmbedUnimplementedImapConcentratorServer *UnsafeImapConcentratorServerMock) mustEmbedUnimplementedImapConcentratorServer() {
	mm_atomic.AddUint64(&mmmustEmbedUnimplementedImapConcentratorServer.beforemustEmbedUnimplementedImapConcentratorServerCounter, 1)
	defer mm_atomic.AddUint64(&mmmustEmbedUnimplementedImapConcentratorServer.aftermustEmbedUnimplementedImapConcentratorServerCounter, 1)

	if mmmustEmbedUnimplementedImapConcentratorServer.inspectFuncmustEmbedUnimplementedImapConcentratorServer != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.inspectFuncmustEmbedUnimplementedImapConcentratorServer()
	}

	if mmmustEmbedUnimplementedImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmmustEmbedUnimplementedImapConcentratorServer.mustEmbedUnimplementedImapConcentratorServerMock.defaultExpectation.Counter, 1)

		return

	}
	if mmmustEmbedUnimplementedImapConcentratorServer.funcmustEmbedUnimplementedImapConcentratorServer != nil {
		mmmustEmbedUnimplementedImapConcentratorServer.funcmustEmbedUnimplementedImapConcentratorServer()
		return
	}
	mmmustEmbedUnimplementedImapConcentratorServer.t.Fatalf("Unexpected call to UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer.")

}

// mustEmbedUnimplementedImapConcentratorServerAfterCounter returns a count of finished UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer invocations
func (mmmustEmbedUnimplementedImapConcentratorServer *UnsafeImapConcentratorServerMock) mustEmbedUnimplementedImapConcentratorServerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmmustEmbedUnimplementedImapConcentratorServer.aftermustEmbedUnimplementedImapConcentratorServerCounter)
}

// mustEmbedUnimplementedImapConcentratorServerBeforeCounter returns a count of UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer invocations
func (mmmustEmbedUnimplementedImapConcentratorServer *UnsafeImapConcentratorServerMock) mustEmbedUnimplementedImapConcentratorServerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmmustEmbedUnimplementedImapConcentratorServer.beforemustEmbedUnimplementedImapConcentratorServerCounter)
}

// MinimockmustEmbedUnimplementedImapConcentratorServerDone returns true if the count of the mustEmbedUnimplementedImapConcentratorServer invocations corresponds
// the number of defined expectations
func (m *UnsafeImapConcentratorServerMock) MinimockmustEmbedUnimplementedImapConcentratorServerDone() bool {
	for _, e := range m.mustEmbedUnimplementedImapConcentratorServerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.mustEmbedUnimplementedImapConcentratorServerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.aftermustEmbedUnimplementedImapConcentratorServerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcmustEmbedUnimplementedImapConcentratorServer != nil && mm_atomic.LoadUint64(&m.aftermustEmbedUnimplementedImapConcentratorServerCounter) < 1 {
		return false
	}
	return true
}

// MinimockmustEmbedUnimplementedImapConcentratorServerInspect logs each unmet expectation
func (m *UnsafeImapConcentratorServerMock) MinimockmustEmbedUnimplementedImapConcentratorServerInspect() {
	for _, e := range m.mustEmbedUnimplementedImapConcentratorServerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.mustEmbedUnimplementedImapConcentratorServerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.aftermustEmbedUnimplementedImapConcentratorServerCounter) < 1 {
		m.t.Error("Expected call to UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcmustEmbedUnimplementedImapConcentratorServer != nil && mm_atomic.LoadUint64(&m.aftermustEmbedUnimplementedImapConcentratorServerCounter) < 1 {
		m.t.Error("Expected call to UnsafeImapConcentratorServerMock.mustEmbedUnimplementedImapConcentratorServer")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UnsafeImapConcentratorServerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockmustEmbedUnimplementedImapConcentratorServerInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UnsafeImapConcentratorServerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UnsafeImapConcentratorServerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockmustEmbedUnimplementedImapConcentratorServerDone()
}
