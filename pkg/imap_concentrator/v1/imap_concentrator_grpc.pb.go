// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: imap_concentrator/v1/imap_concentrator.proto

package imap_concentrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImapConcentratorClient is the client API for ImapConcentrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImapConcentratorClient interface {
	AssignUniqueClientID(ctx context.Context, in *AssignUniqueClientIDRequest, opts ...grpc.CallOption) (*AssignUniqueClientIDResponse, error)
	SubscribeToAllNotificationsV1(ctx context.Context, in *SubscribeToAllNotificationsV1Request, opts ...grpc.CallOption) (ImapConcentrator_SubscribeToAllNotificationsV1Client, error)
	SubscribeToChatNotificationsV1(ctx context.Context, in *SubscribeToChatNotificationsV1Request, opts ...grpc.CallOption) (ImapConcentrator_SubscribeToChatNotificationsV1Client, error)
	UnsubscribeFromNotificationsV1(ctx context.Context, in *UnsubscribeFromNotificationsV1Request, opts ...grpc.CallOption) (*Ack, error)
	InsertMailboxV1(ctx context.Context, in *InsertMailboxV1Request, opts ...grpc.CallOption) (*Ack, error)
	// This rpc should not have gateway endpoint. It is used to authenticate clients.
	InsertChatV1(ctx context.Context, in *InsertChatV1Request, opts ...grpc.CallOption) (*Ack, error)
	PollV1(ctx context.Context, in *PollV1Request, opts ...grpc.CallOption) (*Ack, error)
	ListMailboxesV1(ctx context.Context, in *ListMailboxesV1Request, opts ...grpc.CallOption) (*ListMailboxesV1Response, error)
	GetMailboxV1(ctx context.Context, in *GetMailboxV1Request, opts ...grpc.CallOption) (*GetMailboxV1Response, error)
	UpdateMailboxV1(ctx context.Context, in *UpdateMailboxV1Request, opts ...grpc.CallOption) (*Ack, error)
	DeleteMailboxV1(ctx context.Context, in *DeleteMailboxV1Request, opts ...grpc.CallOption) (*Ack, error)
}

type imapConcentratorClient struct {
	cc grpc.ClientConnInterface
}

func NewImapConcentratorClient(cc grpc.ClientConnInterface) ImapConcentratorClient {
	return &imapConcentratorClient{cc}
}

func (c *imapConcentratorClient) AssignUniqueClientID(ctx context.Context, in *AssignUniqueClientIDRequest, opts ...grpc.CallOption) (*AssignUniqueClientIDResponse, error) {
	out := new(AssignUniqueClientIDResponse)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/AssignUniqueClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) SubscribeToAllNotificationsV1(ctx context.Context, in *SubscribeToAllNotificationsV1Request, opts ...grpc.CallOption) (ImapConcentrator_SubscribeToAllNotificationsV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &ImapConcentrator_ServiceDesc.Streams[0], "/aveplen.imap_concentrator.v1.ImapConcentrator/SubscribeToAllNotificationsV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &imapConcentratorSubscribeToAllNotificationsV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImapConcentrator_SubscribeToAllNotificationsV1Client interface {
	Recv() (*NotificationV1, error)
	grpc.ClientStream
}

type imapConcentratorSubscribeToAllNotificationsV1Client struct {
	grpc.ClientStream
}

func (x *imapConcentratorSubscribeToAllNotificationsV1Client) Recv() (*NotificationV1, error) {
	m := new(NotificationV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imapConcentratorClient) SubscribeToChatNotificationsV1(ctx context.Context, in *SubscribeToChatNotificationsV1Request, opts ...grpc.CallOption) (ImapConcentrator_SubscribeToChatNotificationsV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &ImapConcentrator_ServiceDesc.Streams[1], "/aveplen.imap_concentrator.v1.ImapConcentrator/SubscribeToChatNotificationsV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &imapConcentratorSubscribeToChatNotificationsV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImapConcentrator_SubscribeToChatNotificationsV1Client interface {
	Recv() (*NotificationV1, error)
	grpc.ClientStream
}

type imapConcentratorSubscribeToChatNotificationsV1Client struct {
	grpc.ClientStream
}

func (x *imapConcentratorSubscribeToChatNotificationsV1Client) Recv() (*NotificationV1, error) {
	m := new(NotificationV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imapConcentratorClient) UnsubscribeFromNotificationsV1(ctx context.Context, in *UnsubscribeFromNotificationsV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/UnsubscribeFromNotificationsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) InsertMailboxV1(ctx context.Context, in *InsertMailboxV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/InsertMailboxV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) InsertChatV1(ctx context.Context, in *InsertChatV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/InsertChatV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) PollV1(ctx context.Context, in *PollV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/PollV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) ListMailboxesV1(ctx context.Context, in *ListMailboxesV1Request, opts ...grpc.CallOption) (*ListMailboxesV1Response, error) {
	out := new(ListMailboxesV1Response)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/ListMailboxesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) GetMailboxV1(ctx context.Context, in *GetMailboxV1Request, opts ...grpc.CallOption) (*GetMailboxV1Response, error) {
	out := new(GetMailboxV1Response)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/GetMailboxV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) UpdateMailboxV1(ctx context.Context, in *UpdateMailboxV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/UpdateMailboxV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imapConcentratorClient) DeleteMailboxV1(ctx context.Context, in *DeleteMailboxV1Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/aveplen.imap_concentrator.v1.ImapConcentrator/DeleteMailboxV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImapConcentratorServer is the server API for ImapConcentrator service.
// All implementations must embed UnimplementedImapConcentratorServer
// for forward compatibility
type ImapConcentratorServer interface {
	AssignUniqueClientID(context.Context, *AssignUniqueClientIDRequest) (*AssignUniqueClientIDResponse, error)
	SubscribeToAllNotificationsV1(*SubscribeToAllNotificationsV1Request, ImapConcentrator_SubscribeToAllNotificationsV1Server) error
	SubscribeToChatNotificationsV1(*SubscribeToChatNotificationsV1Request, ImapConcentrator_SubscribeToChatNotificationsV1Server) error
	UnsubscribeFromNotificationsV1(context.Context, *UnsubscribeFromNotificationsV1Request) (*Ack, error)
	InsertMailboxV1(context.Context, *InsertMailboxV1Request) (*Ack, error)
	// This rpc should not have gateway endpoint. It is used to authenticate clients.
	InsertChatV1(context.Context, *InsertChatV1Request) (*Ack, error)
	PollV1(context.Context, *PollV1Request) (*Ack, error)
	ListMailboxesV1(context.Context, *ListMailboxesV1Request) (*ListMailboxesV1Response, error)
	GetMailboxV1(context.Context, *GetMailboxV1Request) (*GetMailboxV1Response, error)
	UpdateMailboxV1(context.Context, *UpdateMailboxV1Request) (*Ack, error)
	DeleteMailboxV1(context.Context, *DeleteMailboxV1Request) (*Ack, error)
	mustEmbedUnimplementedImapConcentratorServer()
}

// UnimplementedImapConcentratorServer must be embedded to have forward compatible implementations.
type UnimplementedImapConcentratorServer struct {
}

func (UnimplementedImapConcentratorServer) AssignUniqueClientID(context.Context, *AssignUniqueClientIDRequest) (*AssignUniqueClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUniqueClientID not implemented")
}
func (UnimplementedImapConcentratorServer) SubscribeToAllNotificationsV1(*SubscribeToAllNotificationsV1Request, ImapConcentrator_SubscribeToAllNotificationsV1Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToAllNotificationsV1 not implemented")
}
func (UnimplementedImapConcentratorServer) SubscribeToChatNotificationsV1(*SubscribeToChatNotificationsV1Request, ImapConcentrator_SubscribeToChatNotificationsV1Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToChatNotificationsV1 not implemented")
}
func (UnimplementedImapConcentratorServer) UnsubscribeFromNotificationsV1(context.Context, *UnsubscribeFromNotificationsV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromNotificationsV1 not implemented")
}
func (UnimplementedImapConcentratorServer) InsertMailboxV1(context.Context, *InsertMailboxV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMailboxV1 not implemented")
}
func (UnimplementedImapConcentratorServer) InsertChatV1(context.Context, *InsertChatV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatV1 not implemented")
}
func (UnimplementedImapConcentratorServer) PollV1(context.Context, *PollV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollV1 not implemented")
}
func (UnimplementedImapConcentratorServer) ListMailboxesV1(context.Context, *ListMailboxesV1Request) (*ListMailboxesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMailboxesV1 not implemented")
}
func (UnimplementedImapConcentratorServer) GetMailboxV1(context.Context, *GetMailboxV1Request) (*GetMailboxV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailboxV1 not implemented")
}
func (UnimplementedImapConcentratorServer) UpdateMailboxV1(context.Context, *UpdateMailboxV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailboxV1 not implemented")
}
func (UnimplementedImapConcentratorServer) DeleteMailboxV1(context.Context, *DeleteMailboxV1Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailboxV1 not implemented")
}
func (UnimplementedImapConcentratorServer) mustEmbedUnimplementedImapConcentratorServer() {}

// UnsafeImapConcentratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImapConcentratorServer will
// result in compilation errors.
type UnsafeImapConcentratorServer interface {
	mustEmbedUnimplementedImapConcentratorServer()
}

func RegisterImapConcentratorServer(s grpc.ServiceRegistrar, srv ImapConcentratorServer) {
	s.RegisterService(&ImapConcentrator_ServiceDesc, srv)
}

func _ImapConcentrator_AssignUniqueClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUniqueClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).AssignUniqueClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/AssignUniqueClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).AssignUniqueClientID(ctx, req.(*AssignUniqueClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_SubscribeToAllNotificationsV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToAllNotificationsV1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImapConcentratorServer).SubscribeToAllNotificationsV1(m, &imapConcentratorSubscribeToAllNotificationsV1Server{stream})
}

type ImapConcentrator_SubscribeToAllNotificationsV1Server interface {
	Send(*NotificationV1) error
	grpc.ServerStream
}

type imapConcentratorSubscribeToAllNotificationsV1Server struct {
	grpc.ServerStream
}

func (x *imapConcentratorSubscribeToAllNotificationsV1Server) Send(m *NotificationV1) error {
	return x.ServerStream.SendMsg(m)
}

func _ImapConcentrator_SubscribeToChatNotificationsV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToChatNotificationsV1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImapConcentratorServer).SubscribeToChatNotificationsV1(m, &imapConcentratorSubscribeToChatNotificationsV1Server{stream})
}

type ImapConcentrator_SubscribeToChatNotificationsV1Server interface {
	Send(*NotificationV1) error
	grpc.ServerStream
}

type imapConcentratorSubscribeToChatNotificationsV1Server struct {
	grpc.ServerStream
}

func (x *imapConcentratorSubscribeToChatNotificationsV1Server) Send(m *NotificationV1) error {
	return x.ServerStream.SendMsg(m)
}

func _ImapConcentrator_UnsubscribeFromNotificationsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeFromNotificationsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).UnsubscribeFromNotificationsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/UnsubscribeFromNotificationsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).UnsubscribeFromNotificationsV1(ctx, req.(*UnsubscribeFromNotificationsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_InsertMailboxV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertMailboxV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).InsertMailboxV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/InsertMailboxV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).InsertMailboxV1(ctx, req.(*InsertMailboxV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_InsertChatV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertChatV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).InsertChatV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/InsertChatV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).InsertChatV1(ctx, req.(*InsertChatV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_PollV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).PollV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/PollV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).PollV1(ctx, req.(*PollV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_ListMailboxesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMailboxesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).ListMailboxesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/ListMailboxesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).ListMailboxesV1(ctx, req.(*ListMailboxesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_GetMailboxV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailboxV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).GetMailboxV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/GetMailboxV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).GetMailboxV1(ctx, req.(*GetMailboxV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_UpdateMailboxV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailboxV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).UpdateMailboxV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/UpdateMailboxV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).UpdateMailboxV1(ctx, req.(*UpdateMailboxV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImapConcentrator_DeleteMailboxV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailboxV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImapConcentratorServer).DeleteMailboxV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aveplen.imap_concentrator.v1.ImapConcentrator/DeleteMailboxV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImapConcentratorServer).DeleteMailboxV1(ctx, req.(*DeleteMailboxV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ImapConcentrator_ServiceDesc is the grpc.ServiceDesc for ImapConcentrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImapConcentrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aveplen.imap_concentrator.v1.ImapConcentrator",
	HandlerType: (*ImapConcentratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignUniqueClientID",
			Handler:    _ImapConcentrator_AssignUniqueClientID_Handler,
		},
		{
			MethodName: "UnsubscribeFromNotificationsV1",
			Handler:    _ImapConcentrator_UnsubscribeFromNotificationsV1_Handler,
		},
		{
			MethodName: "InsertMailboxV1",
			Handler:    _ImapConcentrator_InsertMailboxV1_Handler,
		},
		{
			MethodName: "InsertChatV1",
			Handler:    _ImapConcentrator_InsertChatV1_Handler,
		},
		{
			MethodName: "PollV1",
			Handler:    _ImapConcentrator_PollV1_Handler,
		},
		{
			MethodName: "ListMailboxesV1",
			Handler:    _ImapConcentrator_ListMailboxesV1_Handler,
		},
		{
			MethodName: "GetMailboxV1",
			Handler:    _ImapConcentrator_GetMailboxV1_Handler,
		},
		{
			MethodName: "UpdateMailboxV1",
			Handler:    _ImapConcentrator_UpdateMailboxV1_Handler,
		},
		{
			MethodName: "DeleteMailboxV1",
			Handler:    _ImapConcentrator_DeleteMailboxV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToAllNotificationsV1",
			Handler:       _ImapConcentrator_SubscribeToAllNotificationsV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToChatNotificationsV1",
			Handler:       _ImapConcentrator_SubscribeToChatNotificationsV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imap_concentrator/v1/imap_concentrator.proto",
}
